var data = require('./static_data');

module.exports = {
  facebook: [
    {
      cnet:        { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
                     related: 'technology,helth,science' },
      "jazz dock": { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
                     related: 'music,jazz,concerts' }
    },
    {
      "new scientist": { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
                         related: 'science,literature' },
      "divadlo archa": { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
                         related: 'music,theater,concerts' }
    },
    {
      hiking:    { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
                   related: 'health,fitness' },
      recycling: { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
                   related: 'technology' }
    }
  ],
  newLikes: {},
  totalFacebookSync: 0,

  pinterest: [
    {
      mammals: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
                 related: 'science' },
      spain:   { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
                 related: 'literature,film,music' }
    },
    {
      prague:  { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
                 related: 'literature,film,music' },
      ferrets: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
                 related: 'humor,science' }
    },
    {
      "avant garde":   { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
                         related: 'music,drama,theater,film' },
      synchronicities: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
                         related: 'spirituality,literature,film' }
    }
  ],
  totalPinterestSync: 0,

  facebookImportReset: function() {
    this.facebook = [];
    this.totalFacebookSync = 0;
  },

  importNewLike: function(like) {
    this.newLikes[like.toLowerCase()] = { source: 'facebook', clicks: 0, added: Date.now(), selected: true, related: '' };
  },

  pushNewLikes: function() {
    if(Object.keys(this.newLikes).length > 0) {
      this.facebook.unshift(this.newLikes);
      this.newLikes = {};
    }
  },

  /* -------------------------------------------------
   find all divs marked with the attribute vdnaroot.
   create an array with all children marked with the
   attribute vdnaclass.
   that's the first step, anyway.
   vdnaDivs: { divName: { 0: [ vdna off (all divs) ], 1: [ sorted vdnaclass divs ],
                          2: [ unsorted vdnaclass divs ], 3: [ sorted and truncated vdnaclass divs],
                          4: [ unsorted but truncated vdnaclass divs ] }, divName: { ... } }
     ------------------------------------------------- */

  vdnaDivs: {},

  appendDivs: function(vdnaRootName, numero) {
    this.vdnaDivs[vdnaRootName][numero].forEach(function(div) {
      $("div[vdnaroot='" + vdnaRootName + "']").append(div);
    });
  },

  showVdnaDivs: function() {
    var that = this;
    $("*[vdnaroot]").each(function(index, vdnaRootEl) {
      $(vdnaRootEl).html('');
      var vdnaRootName = $(vdnaRootEl).attr("vdnaroot");
      switch(data.sorting) {
        case 0:
          console.log("vdnaDivs (all): " + JSON.stringify(that.vdnaDivs[vdnaRootName][0]));
          break;
        case 1:
          console.log("vdnaDivs (sorted vdnaclass divs): " + JSON.stringify(that.vdnaDivs[vdnaRootName][0]));
          that.appendDivs(vdnaRootName, 1);
          break;
        case 2:
          console.log("vdnaDivs (unsorted vdnaclass divs): " + JSON.stringify(that.vdnaDivs[vdnaRootName][0]));
          that.appendDivs(vdnaRootName, 2);
          break;
        case 3:
          console.log("vdnaDivs (sorted truncated vdnaclass divs): " + JSON.stringify(that.vdnaDivs[vdnaRootName][0]));
          that.appendDivs(vdnaRootName, 3);
          break;
        case 4:
          console.log("vdnaDivs (unsorted truncated vdnaclass divs): " + JSON.stringify(that.vdnaDivs[vdnaRootName][0]));
          that.appendDivs(vdnaRootName, 4);
          break;
        default:
          console.log("I AM A MUSTELID!");
      }
    });
  },

  gatherVdna: function() {
    var that = this;
    var minVdnaWeight = (5 - data.privacySlider) * 2;
    var selectedInterests = data.getSelectedInterests();
    var selectedInterestKeys = Object.keys(selectedInterests);
    $("*[vdnaroot]").each(function(index, vdnaRootEl) {
      var vdnaRootName = $(vdnaRootEl).attr("vdnaroot");
      that.vdnaDivs[vdnaRootName] = {};
      that.vdnaDivs[vdnaRootName][0] = [];
      that.vdnaDivs[vdnaRootName][2] = [];
      that.vdnaDivs[vdnaRootName][4] = [];
      $(vdnaRootEl).find("*[vdnaclass]").each(function(index, vdnaClassEl) {
        that.vdnaDivs[vdnaRootName][0].push(vdnaClassEl.outerHTML);
        var vdnaWeight = parseInt($(vdnaClassEl).attr('vdnaweight'));
        var show = $(vdnaClassEl).attr('vdnaclass').split(/,/).reduce(function(showOrHide, interest) {
          return showOrHide || selectedInterestKeys.indexOf(interest) > -1;
        }, false) && vdnaWeight >= minVdnaWeight;
        if(show) {
          that.vdnaDivs[vdnaRootName][2].push(vdnaClassEl.outerHTML);
          if(that.vdnaDivs[vdnaRootName][4].length < data.truncateLength) {
            that.vdnaDivs[vdnaRootName][4].push(vdnaClassEl.outerHTML);
          }
        }
      });
      that.vdnaDivs[vdnaRootName][1] = that.vdnaDivs[vdnaRootName][2].sort(function(a, b) {
        var vdnaWeightA = parseInt(a.substr(a.indexOf('vdnaweight') + 12, 2));
        var vdnaWeightB = parseInt(b.substr(b.indexOf('vdnaweight') + 12, 2));
        return vdnaWeightB - vdnaWeightA;
      });
      that.vdnaDivs[vdnaRootName][3] = that.vdnaDivs[vdnaRootName][4].sort(function(a, b) {
        var vdnaWeightA = parseInt(a.substr(a.indexOf('vdnaweight') + 12, 2));
        var vdnaWeightB = parseInt(b.substr(b.indexOf('vdnaweight') + 12, 2));
        return vdnaWeightB - vdnaWeightA;
      });
    });
  }
};
