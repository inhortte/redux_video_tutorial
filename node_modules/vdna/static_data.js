// -----------------------------------
// { categoryName:
//   { interestName:
//     { source: 'facebook',
//       clicks: 5,
//       added: Date.now() },
//     ...
// -----------------------------------

Array.prototype.add = function(arr) {
  var res = [];
  for(var i = 0; i < this.length || i < arr.length; i++) {
    if(this[i] === undefined) {
      res.push(arr[i]);
    } else if(arr[i] === undefined) {
      res.push(this[i]);
    } else {
      res.push(this[i] + arr[i]);
    }
  };
  return res;
};

module.exports = {
  staticInterests: {
    music:              { source: 'ticketpro', clicks: 31, added: Date.now(), selected: true,
                          related: 'rock music,jazz,concerts,opera' },
    "french actors":    { source: 'ticketpro', clicks: 37, added: Date.now(), selected: false,
                          related: 'drama,film' },
    actors:             { source: 'ticketpro', clicks: 35, added: Date.now(), selected: false,
                          related: 'czech film, film' },
    spirituality:       { source: 'ticketpro', clicks: 18, added: Date.now(), selected: false,
                          related: 'literature,music' },
    "czech film":       { source: 'ticketpro', clicks: 54, added: Date.now(), selected: false,
                          related: 'film,actors' },
    "rock music":       { source: 'ticketpro', clicks: 12, added: Date.now(), selected: false,
                          related: 'music' },
    "world music":      { source: 'ticketpro', clicks: 10, added: Date.now(), selected: false,
                          related: 'music' },
    jazz:               { source: 'ticketpro', clicks: 16, added: Date.now(), selected: true,
                          related: 'music' },
    technology:         { source: 'ticketpro', clicks: 19, added: Date.now(), selected: false,
                          related: 'health,science' },
    health:             { source: 'ticketpro', clicks: 20, added: Date.now(), selected: true,
                          related: 'science,dental' },
    dental:             { source: 'ticketpro', clicks: 21, added: Date.now(), selected: false,
                          related: 'health' },
    comics:             { source: 'ticketpro', clicks: 34, added: Date.now(), selected: false,
                          related: 'humor,literature' },
    humor:              { source: 'ticketpro', clicks: 10, added: Date.now(), selected: false,
                          related: 'actors,literature' },
    literature:         { source: 'ticketpro', clicks: 11, added: Date.now(), selected: false,
                          related: 'theater,comics' },
    science:            { source: 'ticketpro', clicks: 13, added: Date.now(), selected: false,
                          related: 'technology,health' },
    drama:              { source: 'ticketpro', clicks: 19, added: Date.now(), selected: false,
                          related: 'theater,film,literature' },
    theater:            { source: 'ticketpro', clicks: 20, added: Date.now(), selected: false,
                          related: 'drama,literature,opera' },
    film:               { source: 'ticketpro', clicks: 21, added: Date.now(), selected: false,
                          related: 'drama,literature,comics' },
    concerts:           { source: 'ticketpro', clicks: 30, added: Date.now(), selected: false,
                          related: 'music,theater' },
    "contemporary art": { source: 'ticketpro', clicks: 18, added: Date.now(), selected: true,
                          related: 'literature,film,theater' },
    opera:              { source: 'ticketpro', clicks: 25, added: Date.now(), selected: false,
                          related: 'music,theater' },
    fitness:            { source: 'ticketpro', clicks: 16, added: Date.now(), selected: false,
                          related: 'health,science' }
  },

  arbitraryBinMapping: {
    "music": "1000000000000000000000000000000000000",
    "french actors": "10000000000000000000000000000000000000",
    "actors": "100000000000000000000000000000000000000",
    "la rioja": "1000000000000000000000000000000000000000",
    "castille y leÃ³n": "10000000000000000000000000000000000000000",
    "spain": "100000000000000000000000000000000000000000",
    "spirituality": "1000000000000000000000000000000000000000000",
    "rio": "10000000000000000000000000000000000000000000",
    "czech film": "100000000000000000000000000000000000000000000",
    "rock music": "1000000000000000000000000000000000000000000000",
    "jazz": "10000000000000000000000000000000000000000000000",
    "technology": "100000000000000000000000000000000000000000000000",
    "health": "1000000000000000000000000000000000000000000000000",
    "dental": "10000000000000000000000000000000000000000000000000",
    "comics": "100000000000000000000000000000000000000000000000000",
    "humor": "1000000000000000000000000000000000000000000000000000",
    "literature": "10000000000000000000000000000000000000000000000000000",
    "science": "100000000000000000000000000000000000000000000000000000",
    "drama": "1000000000000000000000000000000000000000000000000000000",
    "theater": "10000000000000000000000000000000000000000000000000000000",
    "film": "100000000000000000000000000000000000000000000000000000000",
    "concerts": "1000000000000000000000000000000000000000000000000000000000",
    "contemporary art": "10000000000000000000000000000000000000000000000000000000000",
    "opera": "100000000000000000000000000000000000000000000000000000000000",
    "fitness": "1000000000000000000000000000000000000000000000000000000000000"
  },

  privacySlider: 3,
  power: false,

  reverseBinMapping: function() {
    var that = this;
    return Object.keys(this.arbitraryBinMapping).reduce(function(rMap, key) {
      rMap[that.arbitraryBinMapping[key]] = key;
      return rMap;
    }, {});
  },

  // --- everything must be split into two 32 bit thurks.
  arbitraryDecMapping: function() {
    var that = this;
    return Object.keys(this.arbitraryBinMapping).reduce(function(dMap, key) {
      dMap[key] = that.binStringArrToDecArr(binStringSplit(32, that.arbitraryBinMapping[key]));
      return dMap;
    }, {});
  },

  // --- helper monkeys (cookies)

  powOf2Arr: function(i) {
    var arr = [];
    for(var j = 0; j < i; j++) {
      arr.push(Math.pow(2, j));
    };
    return arr;
  },

  // --- split into n (32 for now) bit trozos.
  binStringSplit: function(n, binString) {
    var remString = binString;
    var trozos = [];
    while(remString.length > n) {
      trozos.unshift(remString.substr(remString.length - n));
      remString = remString.substr(0, remString.length - n);
    };
    trozos.unshift(remString);
    return trozos;
  },

  binStringToDec: function(binString) {
    var powArr = powOf2Arr(binString.length).reverse();
    var acc = 0;
    for(var i = 0; i < binString.length; i++) {
      acc += powArr[i] * parseInt(binString.charAt(i));
    };
    return acc;
  },

  binStringArrToDecArr: function(binStringArr) {
    var that = this;
    return this.binStringArr.map(function(binString) {
      return that.binStringToDec(binString);
    });
  },

  // Esto solo funciona con integrales positivos.
  decToBinString: function(dec) {
    if(dec === undefined) {
      return "0";
    }
    var binString = "";
    while(dec >= 1) {
      binString = (dec % 2).toString() + binString;
      dec = Math.floor(dec / 2);
    };
    return binString;
  },

  // --- end helper monkeys

  //----------------------
  // In: [Keyword, ....], mapping
  // Out: {binString: "1000000.....", dec: 78210...}
  //----------------------
  interestsToBinStringAndDec: function(keywordArr, mapping) {
    var that = this;
    return keywordArr.map(function(keyword) {
      return mapping[keyword];
    }).reduce(function(culmination, binString) {
      var dec;
      if(binString === undefined) {
        dec = dec;
      } else {
        dec = culmination['dec'] + that.binStringToDec(binString);
      }
      culmination['binString'] = that.decToBinString(dec);
      culmination['dec'] = dec;
      return culmination;
    }, {binString: "", dec: 0});
  },

  // -----------------------
  // In [Keyword, ....] (to DecArr) mapping.
  // Out: {binString: "10000...", decArr: [ 4194304, 0 ] (example)}
  interestsToDecArr: function(keywordArr, mapping) {
    var _mapping = mapping === undefined ? this.arbitraryDecMapping : mapping;
    return keywordArr.map(function(keyword) {
      return mapping[keyword.toLowerCase()];
    }).reduce(function(culmination, decArr) {
      if(decArr !== undefined) {
        culmination = culmination.add(decArr);
      }
      return culmination;
    }, [0]);
  },

  //----------------------
  // In: decimal array
  // Out: [Keyword, Keyword, ....]
  // For now, I'll always pass arbitraryDecMapping as mapping
  // ---------------------
  decArrToKeywords: function(decArr, mapping) {
    return Object.keys(mapping).reduce(function(keywords, keyword) {
      var keywordDecArr = mapping[keyword];
      if(keywordDecArr.length == decArr.length) {
        var match = true;
        for(var i = 0; i < decArr.length; i++) {
          match = match && (decArr[i] == keywordDecArr[i] || (decArr[i] & keywordDecArr[i]) > 0);
        };
        if(match) {
          keywords.push(keyword);
        }
      }
      return keywords;
    }, []);
  },

  capitalize: function(s) {
    return(s[0].toUpperCase() + s.substr(1));
  },

  blinkNodes: function() {
    console.log('blinkNodes!!!!!!');
    var that = this;
    var minVdnaWeight = (5 - this.privacySlider) * 2;
    var selectedInterests = Object.keys(this.staticInterests).filter(function(interest) {
      return that.staticInterests[interest]['selected'];
    }).reduce(function(is, i) {
      is[i] = that.staticInterests[i];
      return is;
    }, {});
    var selectedInterestKeys = Object.keys(selectedInterests);
    console.log(JSON.stringify(selectedInterestKeys));

    $("*[vdnaclass]").each(function(index, el) {
      var vdnaWeight = parseInt($(el).attr('vdnaweight'));
      var show = $(el).attr('vdnaclass').split(/,/).reduce(function(showOrHide, keyword) {
        return showOrHide || (selectedInterestKeys.indexOf(keyword) > -1);
      }, false) && (vdnaWeight >= minVdnaWeight);
      if(show) {
        $(el).show();
      } else {
        if(that.power) {
          $(el).hide();
        } else {
          $(el).show();
        }
      }
    });
  },

  /*
   addInterest: function(category, interest) {
     staticData[category][interest] = { category: category, source: 'vdna', clicks: 1, added: Date.now(), selected: true };
   },
   */

  addInterest: function(interest) {
    if(this.staticInterests[interest] !== undefined) {
      this.staticInterests[interest]['selected'] = true;
      this.blinkNodes();
      // React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
      return true;
    } else {
      return false;
    }
  },

  /*
   var addRelatedInterest = function(category, interest) {
     staticData[category][interest]['selected'] = true;
     React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
   },
   */

  addRelatedInterest: function(interest) {
    this.staticInterests[interest]['selected'] = true;
    this.blinkNodes();
    // React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
  },

  /*
   unLikeAnInterest: function(category, interest) {
     staticData[category][interest]['selected'] = false;
     React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
   },
   */

  unLikeAnInterest: function(interest) {
    this.staticInterests[interest]['selected'] = false;
    this.blinkNodes();
    // React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
  },

  setPrivacySlider: function(val) {
    if(val !== this.privacySlider) {
      this.privacySlider = val;
      console.log('privacy slider set to: ' + val);
      this.blinkNodes();
    }
  },

  mergeObjects: function(obj1, obj2) {
    Object.keys(obj2).forEach(function(key) {
      obj1[key] = obj2[key];
    });
    return obj1;
  }
};
