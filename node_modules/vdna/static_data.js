// -----------------------------------
// { categoryName:
//   { interestName:
//     { source: 'facebook',
//       clicks: 5,
//       added: Date.now() },
//     ...
// -----------------------------------

'use strict';

Array.prototype.add = function (arr) {
  var res = [];
  for (var i = 0; i < this.length || i < arr.length; i++) {
    if (this[i] === undefined) {
      res.push(arr[i]);
    } else if (arr[i] === undefined) {
      res.push(this[i]);
    } else {
      res.push(this[i] + arr[i]);
    }
  };
  return res;
};

module.exports = {
  staticInterests: {
    music: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: true,
      related: 'rock music,jazz,concerts,opera' },
    "french actors": { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'drama,film' },
    actors: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'czech film, film' },
    spirituality: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'literature,music' },
    "czech film": { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'film,actors' },
    "rock music": { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'music' },
    "world music": { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'music' },
    jazz: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: true,
      related: 'music' },
    technology: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'health,science' },
    health: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: true,
      related: 'science,dental' },
    dental: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'health' },
    comics: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'humor,literature' },
    humor: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'actors,literature' },
    literature: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'theater,comics' },
    science: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'technology,health' },
    drama: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'theater,film,literature' },
    theater: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'drama,literature,opera' },
    film: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'drama,literature,comics' },
    concerts: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'music,theater' },
    "contemporary art": { source: 'ticketpro', clicks: 0, added: Date.now(), selected: true,
      related: 'literature,film,theater' },
    opera: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'music,theater' },
    fitness: { source: 'ticketpro', clicks: 0, added: Date.now(), selected: false,
      related: 'health,science' }
  },

  arbitraryBinMapping: {
    "music": "1000000000000000000000000000000000000",
    "french actors": "10000000000000000000000000000000000000",
    "actors": "100000000000000000000000000000000000000",
    "la rioja": "1000000000000000000000000000000000000000",
    "castille y leÃ³n": "10000000000000000000000000000000000000000",
    "spain": "100000000000000000000000000000000000000000",
    "spirituality": "1000000000000000000000000000000000000000000",
    "rio": "10000000000000000000000000000000000000000000",
    "czech film": "100000000000000000000000000000000000000000000",
    "rock music": "1000000000000000000000000000000000000000000000",
    "jazz": "10000000000000000000000000000000000000000000000",
    "technology": "100000000000000000000000000000000000000000000000",
    "health": "1000000000000000000000000000000000000000000000000",
    "dental": "10000000000000000000000000000000000000000000000000",
    "comics": "100000000000000000000000000000000000000000000000000",
    "humor": "1000000000000000000000000000000000000000000000000000",
    "literature": "10000000000000000000000000000000000000000000000000000",
    "science": "100000000000000000000000000000000000000000000000000000",
    "drama": "1000000000000000000000000000000000000000000000000000000",
    "theater": "10000000000000000000000000000000000000000000000000000000",
    "film": "100000000000000000000000000000000000000000000000000000000",
    "concerts": "1000000000000000000000000000000000000000000000000000000000",
    "contemporary art": "10000000000000000000000000000000000000000000000000000000000",
    "opera": "100000000000000000000000000000000000000000000000000000000000",
    "fitness": "1000000000000000000000000000000000000000000000000000000000000"
  },

  privacySlider: 3,
  power: true,
  info_balloon: false,
  facebookConnect: false,
  pinterestConnect: false,

  // ---- settings
  // for sorting: 0: vdna off
  //              1: sorted vdnaclass divs
  //              2: unsorted vdnaclass divs
  //              3: sorted and truncated vdnaclass divs
  //              4: unsorted but truncated vdnaclass divs
  autosave: true,
  sorting: 1,
  truncateLength: 10, // Static for now.

  reverseBinMapping: function reverseBinMapping() {
    var that = this;
    return Object.keys(this.arbitraryBinMapping).reduce(function (rMap, key) {
      rMap[that.arbitraryBinMapping[key]] = key;
      return rMap;
    }, {});
  },

  // --- everything must be split into two 32 bit thurks.
  arbitraryDecMapping: function arbitraryDecMapping() {
    var that = this;
    return Object.keys(this.arbitraryBinMapping).reduce(function (dMap, key) {
      dMap[key] = that.binStringArrToDecArr(that.binStringSplit(32, that.arbitraryBinMapping[key]));
      return dMap;
    }, {});
  },

  // --- helper monkeys (cookies)

  powOf2Arr: function powOf2Arr(i) {
    var arr = [];
    for (var j = 0; j < i; j++) {
      arr.push(Math.pow(2, j));
    };
    return arr;
  },

  // --- split into n (32 for now) bit trozos.
  binStringSplit: function binStringSplit(n, binString) {
    var remString = binString;
    var trozos = [];
    while (remString.length > n) {
      trozos.unshift(remString.substr(remString.length - n));
      remString = remString.substr(0, remString.length - n);
    };
    trozos.unshift(remString);
    return trozos;
  },

  binStringToDec: function binStringToDec(binString) {
    var powArr = this.powOf2Arr(binString.length).reverse();
    var acc = 0;
    for (var i = 0; i < binString.length; i++) {
      acc += powArr[i] * parseInt(binString.charAt(i));
    };
    return acc;
  },

  binStringArrToDecArr: function binStringArrToDecArr(binStringArr) {
    var that = this;
    return binStringArr.map(function (binString) {
      return that.binStringToDec(binString);
    });
  },

  // Esto solo funciona con integrales positivos.
  decToBinString: function decToBinString(dec) {
    if (dec === undefined) {
      return "0";
    }
    var binString = "";
    while (dec >= 1) {
      binString = (dec % 2).toString() + binString;
      dec = Math.floor(dec / 2);
    };
    return binString;
  },

  // --- end helper monkeys

  //----------------------
  // In: [Keyword, ....], mapping
  // Out: {binString: "1000000.....", dec: 78210...}
  //----------------------
  interestsToBinStringAndDec: function interestsToBinStringAndDec(keywordArr, mapping) {
    var that = this;
    return keywordArr.map(function (keyword) {
      return mapping[keyword];
    }).reduce(function (culmination, binString) {
      var dec;
      if (binString === undefined) {
        dec = dec;
      } else {
        dec = culmination['dec'] + that.binStringToDec(binString);
      }
      culmination['binString'] = that.decToBinString(dec);
      culmination['dec'] = dec;
      return culmination;
    }, { binString: "", dec: 0 });
  },

  // -----------------------
  // In [Keyword, ....] (to DecArr) mapping.
  // Out: {binString: "10000...", decArr: [ 4194304, 0 ] (example)}
  interestsToDecArr: function interestsToDecArr(interestsArr, mapping) {
    var _mapping = mapping === undefined ? this.arbitraryDecMapping() : mapping;
    return interestsArr.map(function (interest) {
      return _mapping[interest.toLowerCase()];
    }).reduce(function (culmination, decArr) {
      if (decArr !== undefined) {
        culmination = culmination.add(decArr);
      }
      return culmination;
    }, [0]);
  },

  tallyExtraInterests: function tallyExtraInterests(interestsArr, mapping) {
    var _mapping = mapping === undefined ? this.arbitraryDecMapping() : mapping;
    return interestsArr.filter(function (interest) {
      return _mapping[interest.toLowerCase()] === undefined;
    }).join(':::');
  },

  //----------------------
  // In: decimal array
  // Out: [Keyword, Keyword, ....]
  // For now, I'll always pass arbitraryDecMapping as mapping
  // ---------------------
  decArrToInterests: function decArrToInterests(decArr, mapping) {
    var _mapping = mapping === undefined ? this.arbitraryDecMapping() : mapping;
    return Object.keys(_mapping).reduce(function (interests, interest) {
      var interestDecArr = _mapping[interest];
      if (interestDecArr.length == decArr.length) {
        var match = true;
        for (var i = 0; i < decArr.length; i++) {
          match = match && (decArr[i] == interestDecArr[i] || (decArr[i] & interestDecArr[i]) > 0);
        };
        if (match) {
          interests.push(interest);
        }
      }
      return interests;
    }, []);
  },

  capitalize: function capitalize(s) {
    return s[0].toUpperCase() + s.substr(1);
  },

  getSelectedInterests: function getSelectedInterests() {
    var that = this;
    return Object.keys(this.staticInterests).filter(function (interest) {
      return that.staticInterests[interest]['selected'];
    }).reduce(function (is, i) {
      is[i] = that.staticInterests[i];
      return is;
    }, {});
  },

  /* No longer used */
  blinkNodes: function blinkNodes() {
    console.log('blinkNodes!!!!!!');
    var that = this;
    var minVdnaWeight = (5 - this.privacySlider) * 2;
    var truncate = this.sorting === 2;
    var selectedInterests = this.getSelectedInterests();
    var selectedInterestKeys = Object.keys(selectedInterests);
    console.log(JSON.stringify(selectedInterestKeys));

    var shownIndex = 0;
    $("*[vdnaclass]").each(function (index, el) {
      var vdnaWeight = parseInt($(el).attr('vdnaweight'));
      var show = $(el).attr('vdnaclass').split(/,/).reduce(function (showOrHide, keyword) {
        return showOrHide || selectedInterestKeys.indexOf(keyword) > -1;
      }, false) && vdnaWeight >= minVdnaWeight && (!truncate || shownIndex < that.truncateLength);
      if (show) {
        $(el).show();
        shownIndex += 1;
      } else {
        if (that.power) {
          $(el).hide();
        } else {
          $(el).show();
          shownIndex += 1;
        }
      }
    });
  },

  /*
   addInterest: function(category, interest) {
     staticData[category][interest] = { category: category, source: 'vdna', clicks: 1, added: Date.now(), selected: true };
   },
   */

  addInterest: function addInterest(interest) {
    if (typeof this.staticInterests[interest] === 'object') {
      this.staticInterests[interest]['selected'] = true;
      this.gatherVdna();
      this.showVdnaDivs();
      return true;
    } else {
      return false;
    }
  },

  /*
   var addRelatedInterest = function(category, interest) {
     staticData[category][interest]['selected'] = true;
     React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
   },
   */

  addRelatedInterest: function addRelatedInterest(interest) {
    this.staticInterests[interest]['selected'] = true;
    // this.blinkNodes();
    this.gatherVdna();
    this.showVdnaDivs();
    // React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
  },

  /*
   unLikeAnInterest: function(category, interest) {
     staticData[category][interest]['selected'] = false;
     React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
   },
   */

  unLikeAnInterest: function unLikeAnInterest(interest) {
    this.staticInterests[interest]['selected'] = false;
    // this.blinkNodes();
    this.gatherVdna();
    this.showVdnaDivs();
    // React.render(<VdnaMenu />, document.getElementById('vdnamenu'));
  },

  setPrivacySlider: function setPrivacySlider(val) {
    if (val !== this.privacySlider) {
      this.privacySlider = val;
      console.log('privacy slider set to: ' + val);
      // this.blinkNodes();
      this.gatherVdna();
      this.showVdnaDivs();
    }
  },

  mergeObjects: function mergeObjects(obj1, obj2) {
    Object.keys(obj2).forEach(function (key) {
      obj1[key] = obj2[key];
    });
    return obj1;
  },

  facebook: [{
    cnet: { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
      related: 'technology,helth,science' },
    "jazz dock": { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
      related: 'music,jazz,concerts' }
  }, {
    "new scientist": { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
      related: 'science,literature' },
    "divadlo archa": { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
      related: 'music,theater,concerts' }
  }, {
    hiking: { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
      related: 'health,fitness' },
    recycling: { source: 'facebook', clicks: 0, added: Date.now(), selected: true,
      related: 'technology' }
  }],
  newLikes: {},
  totalFacebookSync: 0,

  pinterest: [{
    mammals: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
      related: 'science' },
    spain: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
      related: 'literature,film,music' }
  }, {
    prague: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
      related: 'literature,film,music' },
    ferrets: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
      related: 'humor,science' }
  }, {
    "avant garde": { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
      related: 'music,drama,theater,film' },
    synchronicities: { source: 'pintrest', clicks: 0, added: Date.now(), selected: true,
      related: 'spirituality,literature,film' }
  }],
  totalPinterestSync: 0,

  facebookImportReset: function facebookImportReset() {
    this.facebook = [];
    this.totalFacebookSync = 0;
  },

  importNewLike: function importNewLike(like) {
    this.newLikes[like.toLowerCase()] = { source: 'facebook', clicks: 0, added: Date.now(), selected: true, related: '' };
  },

  pushNewLikes: function pushNewLikes() {
    if (Object.keys(this.newLikes).length > 0) {
      this.facebook.unshift(this.newLikes);
      this.newLikes = {};
    }
  },

  /* -------------------------------------------------
   find all divs marked with the attribute vdnaroot.
   create an array with all children marked with the
   attribute vdnaclass.
   that's the first step, anyway.
   vdnaDivs: { divName: { 0: [ vdna off (all divs) ], 1: [ sorted vdnaclass divs ],
                          2: [ unsorted vdnaclass divs ], 3: [ sorted and truncated vdnaclass divs],
                          4: [ unsorted but truncated vdnaclass divs ] }, divName: { ... } }
     ------------------------------------------------- */

  originalVdnaDivs: {},
  vdnaDivs: {},

  _appendDivs: function _appendDivs(vdnaRootName, numero) {
    this.vdnaDivs[vdnaRootName][numero].forEach(function (div) {
      $("div[vdnaroot='" + vdnaRootName + "']").append(div);
    });
  },

  showVdnaDivs: function showVdnaDivs() {
    var that = this;
    $("*[vdnaroot]").each(function (index, vdnaRootEl) {
      $(vdnaRootEl).html('');
      var vdnaRootName = $(vdnaRootEl).attr("vdnaroot");
      console.log('Sorting: ' + that.sorting);
      console.log('About to append ' + that.vdnaDivs[vdnaRootName][that.sorting].length + ' divs.');
      console.log("vdnaDivs (weights): " + JSON.stringify(that.vdnaDivs[vdnaRootName][that.sorting].map(function (div) {
        return parseInt(div.substr(div.indexOf('vdnaweight') + 12, 2));
      })));
      that._appendDivs(vdnaRootName, that.sorting);
    });
  },

  _weightSort: function _weightSort(a, b) {
    var vdnaWeightA = parseInt(a.substr(a.indexOf('vdnaweight') + 12, 2));
    var vdnaWeightB = parseInt(b.substr(b.indexOf('vdnaweight') + 12, 2));
    // console.log('vdnaWeightA : ' + vdnaWeightA + '    vdnaWeightB: ' + vdnaWeightB);
    return vdnaWeightB - vdnaWeightA;
  },

  gatherOriginalVdna: function gatherOriginalVdna() {
    var that = this;
    $("*[vdnaroot]").each(function (index, vdnaRootEl) {
      var vdnaRootName = $(vdnaRootEl).attr("vdnaroot");
      that.originalVdnaDivs[vdnaRootName] = [];
      $(vdnaRootEl).find("*[vdnaclass]").each(function (index, vdnaClassEl) {
        that.originalVdnaDivs[vdnaRootName].push(vdnaClassEl.outerHTML);
      });
    });
  },

  gatherVdna: function gatherVdna() {
    'use strict';

    var _this = this;

    if (Object.keys(this.originalVdnaDivs) === 0) {
      this.gatherOriginalVdna();
    }

    var minVdnaWeight = (5 - this.privacySlider) * 2;
    var selectedInterests = this.getSelectedInterests();
    var selectedInterestKeys = Object.keys(selectedInterests);
    $("*[vdnaroot]").each(function (index, vdnaRootEl) {
      var vdnaRootName = $(vdnaRootEl).attr("vdnaroot");
      console.log("VdnaRoot: " + vdnaRootName);
      _this.vdnaDivs[vdnaRootName] = [];
      _this.vdnaDivs[vdnaRootName][0] = [];
      _this.vdnaDivs[vdnaRootName][2] = [];
      _this.vdnaDivs[vdnaRootName][4] = [];
      console.log('originalVdna Count: (' + vdnaRootName + '): ' + _this.originalVdnaDivs[vdnaRootName].length);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _this.originalVdnaDivs[vdnaRootName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var vdnaClassElStr = _step.value;

          _this.vdnaDivs[vdnaRootName][0].push(vdnaClassElStr);
          var vdnaClassEl = $.parseHTML(vdnaClassElStr);
          var vdnaWeight = parseInt($(vdnaClassEl).attr('vdnaweight'));
          var show = $(vdnaClassEl).attr('vdnaclass').split(/,/).reduce(function (showOrHide, interest) {
            return showOrHide || selectedInterestKeys.indexOf(interest.trim().toLowerCase()) > -1;
          }, false) && vdnaWeight >= minVdnaWeight;
          if (show) {
            _this.vdnaDivs[vdnaRootName][2].push(vdnaClassElStr);
            if (_this.vdnaDivs[vdnaRootName][4].length < _this.truncateLength) {
              _this.vdnaDivs[vdnaRootName][4].push(vdnaClassElStr);
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      ;
      // because Array.prototype.sort is DESTRUCTIVE!
      _this.vdnaDivs[vdnaRootName][1] = _this.vdnaDivs[vdnaRootName][2].reduce(function (memo, el) {
        memo.push(el);
        return memo;
      }, []).sort(_this._weightSort);
      _this.vdnaDivs[vdnaRootName][3] = _this.vdnaDivs[vdnaRootName][4].reduce(function (memo, el) {
        memo.push(el);
        return memo;
      }, []).sort(_this._weightSort);
    });
    console.log("vdnaDivs STATISTICS: \n");
    for (var i = 0; i < 5; i++) {
      console.log(i + ": " + this.vdnaDivs["events"][i].length);
    }
  }
};

//# sourceMappingURL=data:application/json;base64,